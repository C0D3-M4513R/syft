package rust

import (
	"crypto/sha1"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"strings"
	"testing"

	"github.com/anchore/syft/syft/pkg/rust"

	"github.com/anchore/syft/syft/artifact"
	"github.com/anchore/syft/syft/file"
	"github.com/anchore/syft/syft/pkg"
	"github.com/anchore/syft/syft/pkg/cataloger/internal/pkgtest"
)

type registryLink string

const (
	OfficialRegistry registryLink = "registry+https://github.com/rust-lang/crates.io-index"
	OfficialSparse   registryLink = "sparse+https://index.crates.io"
)

type packageInfo struct {
	pkg.Package
	RustMeta              rust.RustCargoLockEntry
	CoordinatePathPrepend string
}

func newPackage(
	t *testing.T,
	name string,
	version string,
	locations file.LocationSet,
	toml rust.CargoToml,
	registry registryLink,
	checksum string,
	dependencies []string,
	pathSha1Hashes map[string][sha1.Size]byte, //#nosec G505 G401 -- sha1 is used as a required hash function for SPDX, not a crypto function
) packageInfo {
	downloadShaUnl, err := hex.DecodeString(checksum)
	if err != nil {
		t.Fatal("Failed to decode checksum as a hex string")
	}
	var downloadSha [sha256.Size]byte
	copy(downloadSha[:], downloadShaUnl)
	sourceInfo := rust.SourceGeneratedDepInfo{
		DownloadLink:   fmt.Sprintf("https://static.crates.io/crates/%s/%s/download", name, version),
		DownloadSha:    downloadSha,
		Licenses:       []string{toml.Package.License},
		CargoToml:      toml,
		PathSha1Hashes: pathSha1Hashes,
	}
	rustMeta := rust.RustCargoLockEntry{
		Name:         name,
		Version:      version,
		Source:       string(registry),
		Checksum:     checksum,
		Dependencies: dependencies,
		RegistryGeneratedInfo: &rust.RegistryGeneratedInfo{
			IsLocalFile: false,
			RepositoryConfig: rust.RepositoryConfig{
				Download:     "https://static.crates.io/crates",
				API:          "https://crates.io",
				AuthRequired: false,
			},
		},
		SourceGeneratedDepInfo: &sourceInfo,
	}
	return packageInfo{
		Package: pkg.Package{
			Name:      name,
			Version:   version,
			PURL:      fmt.Sprintf("pkg:cargo/%s@%s", name, version),
			Locations: locations,
			Language:  pkg.Rust,
			Type:      pkg.RustPkg,
			Licenses:  pkg.NewLicenseSet(pkg.NewLicense(toml.Package.License)),
			Metadata:  rustMeta,
		},
		RustMeta:              rustMeta,
		CoordinatePathPrepend: fmt.Sprintf("%s-%s/", name, version),
	}
}

// The dependencies in this test are not correct.
// They have been altered in a consistent way, to avoid having an excessive amount of relations.
func TestParseCargoLock(t *testing.T) {
	fixture := "test-fixtures/Cargo.lock"
	locations := file.NewLocationSet(file.NewLocation(fixture))
	//goland:noinspection GoSnakeCaseUsage
	ansi_term := newPackage(
		t,
		"ansi_term",
		"0.12.1",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "Library for ANSI terminal colours and styles (bold, underline)",
				Homepage:    "https://github.com/ogham/rust-ansi-term",
				Repository:  "https://github.com/ogham/rust-ansi-term",
				License:     "MIT",
				LicenseFile: "",
			},
		},
		OfficialRegistry,
		"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
		[]string{}, // see comment at the head of the function
		map[string][20]byte{
			"ansi_term-0.12.1/.appveyor.yml":             {0xc4, 0x2d, 0x6a, 0x3f, 0x7e, 0x50, 0x34, 0xfa, 0xa6, 0x57, 0x5f, 0xfb, 0x3f, 0xbd, 0xbb, 0xdf, 0xf1, 0xc7, 0xae, 0x36},
			"ansi_term-0.12.1/.gitignore":                {0xa6, 0x1a, 0x3e, 0x6e, 0x96, 0xc7, 0x0b, 0xfd, 0x3e, 0x73, 0x17, 0xe2, 0x73, 0xe4, 0xbc, 0x73, 0x96, 0x6c, 0xd2, 0x06},
			"ansi_term-0.12.1/.rustfmt.toml":             {0xc5, 0x76, 0x47, 0x22, 0x07, 0x9c, 0x8d, 0x29, 0x35, 0x5b, 0x51, 0xc5, 0x29, 0xd3, 0x3a, 0xa9, 0x87, 0x30, 0x8d, 0x96},
			"ansi_term-0.12.1/.travis.yml":               {0x87, 0xb6, 0x30, 0x0a, 0x2c, 0x64, 0xfd, 0x5c, 0x27, 0x7b, 0x23, 0x9c, 0xcf, 0x3a, 0x19, 0x7a, 0xc9, 0x33, 0x30, 0xa9},
			"ansi_term-0.12.1/Cargo.toml.orig":           {0x02, 0x86, 0x52, 0xd4, 0x2e, 0x04, 0xc0, 0x77, 0x10, 0x1d, 0xe1, 0x91, 0x54, 0x42, 0xbc, 0x91, 0xb9, 0x69, 0xb0, 0xb8},
			"ansi_term-0.12.1/Cargo.toml":                {0x02, 0x93, 0xcd, 0xba, 0x28, 0x4e, 0xad, 0x16, 0x1e, 0x8b, 0xb2, 0x28, 0x10, 0xdf, 0x81, 0xda, 0x7e, 0x0d, 0x4d, 0x46},
			"ansi_term-0.12.1/examples/256_colours.rs":   {0x69, 0xe1, 0x80, 0x3a, 0x4e, 0x8c, 0xeb, 0x7b, 0x9a, 0xc8, 0x24, 0x10, 0x5e, 0x13, 0x2e, 0x36, 0xda, 0xc5, 0xf8, 0x3d},
			"ansi_term-0.12.1/examples/basic_colours.rs": {0x1b, 0x01, 0x2d, 0x37, 0xd1, 0x82, 0x1e, 0xb9, 0x62, 0x78, 0x1e, 0x3b, 0x70, 0xf8, 0xa1, 0x04, 0x95, 0x68, 0xa6, 0x84},
			"ansi_term-0.12.1/examples/rgb_colours.rs":   {0xfe, 0x54, 0xd6, 0x38, 0x2d, 0xe0, 0x9f, 0x91, 0x05, 0x6c, 0xd0, 0xf0, 0xe2, 0x3e, 0xe0, 0xcf, 0x08, 0xf4, 0xa4, 0x65},
			"ansi_term-0.12.1/LICENCE":                   {0x72, 0x93, 0x92, 0x0a, 0xac, 0x55, 0xf4, 0xd2, 0x75, 0xce, 0xf8, 0x3b, 0xa1, 0x0d, 0x70, 0x65, 0x85, 0x62, 0x2a, 0x53},
			"ansi_term-0.12.1/README.md":                 {0x02, 0x56, 0x09, 0x7d, 0x83, 0xaf, 0xe0, 0x2e, 0x62, 0x9b, 0x92, 0x45, 0x38, 0xe6, 0x4d, 0xaa, 0x5c, 0xc9, 0x6c, 0xfc},
			"ansi_term-0.12.1/src/ansi.rs":               {0xa4, 0x4f, 0xeb, 0xd8, 0x38, 0xc3, 0xc6, 0xa0, 0x83, 0xad, 0x78, 0x55, 0xf8, 0xf2, 0x56, 0x12, 0x0f, 0x59, 0x10, 0xe5},
			"ansi_term-0.12.1/src/debug.rs":              {0x9a, 0x14, 0x4e, 0xac, 0x56, 0x9f, 0xaa, 0xdf, 0x34, 0x76, 0x39, 0x4b, 0x6c, 0xcb, 0x14, 0xc5, 0x35, 0xd5, 0xa4, 0xb3},
			"ansi_term-0.12.1/src/difference.rs":         {0xb2, 0x7f, 0x3d, 0x41, 0xbb, 0xaa, 0x70, 0xb4, 0x27, 0xa6, 0xbe, 0x96, 0x5b, 0x20, 0x3d, 0x14, 0xb0, 0x2b, 0x46, 0x1f},
			"ansi_term-0.12.1/src/display.rs":            {0x0c, 0x0a, 0x49, 0xac, 0x7f, 0x10, 0xfe, 0xd5, 0x13, 0x12, 0x84, 0x4f, 0x07, 0x36, 0xd9, 0xb2, 0x7b, 0x21, 0xe2, 0x89},
			"ansi_term-0.12.1/src/lib.rs":                {0x68, 0x5f, 0x66, 0xc3, 0xd2, 0xfd, 0x04, 0x87, 0xde, 0xad, 0x77, 0x76, 0x4d, 0x8d, 0x4a, 0x1d, 0x88, 0x2a, 0xad, 0x38},
			"ansi_term-0.12.1/src/style.rs":              {0x30, 0xe0, 0xf9, 0x15, 0x77, 0x60, 0xb3, 0x74, 0xca, 0xff, 0x3e, 0xbc, 0xdc, 0xb0, 0xb9, 0x32, 0x11, 0x5f, 0xc4, 0x9f},
			"ansi_term-0.12.1/src/util.rs":               {0xec, 0x08, 0x5d, 0xab, 0xb9, 0xf7, 0x10, 0x3e, 0xcf, 0x9c, 0x3c, 0x15, 0x0d, 0x1f, 0x57, 0xcf, 0x33, 0xa4, 0xc6, 0xeb},
			"ansi_term-0.12.1/src/windows.rs":            {0xa2, 0x27, 0x13, 0x41, 0xa4, 0x24, 0x89, 0x16, 0xee, 0xba, 0xf9, 0x07, 0xb2, 0x7b, 0xe2, 0x17, 0x0c, 0x12, 0xd4, 0x5c},
			"ansi_term-0.12.1/src/write.rs":              {0xac, 0x7f, 0x43, 0x5f, 0x78, 0xef, 0x8c, 0x2e, 0xd7, 0x33, 0x57, 0x3c, 0x62, 0xc4, 0x28, 0xc7, 0xa9, 0x79, 0x40, 0x38},
			"ansi_term-0.12.1/.cargo_vcs_info.json":      {0x21, 0x6d, 0x8c, 0x4b, 0x73, 0xc5, 0xc9, 0x20, 0xe5, 0x0b, 0x93, 0x81, 0x79, 0x9f, 0xab, 0xee, 0xb6, 0xdb, 0x9e, 0x2b},
			"ansi_term-0.12.1/Cargo.lock":                {0x4f, 0xe4, 0xf3, 0x1e, 0xcf, 0x55, 0x87, 0x74, 0x9e, 0xf3, 0x6a, 0x0d, 0x73, 0x75, 0x20, 0x50, 0x5e, 0x2b, 0x73, 0x8a},
		},
	)
	matches := newPackage(
		t,
		"matches",
		"0.1.8",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "A macro to evaluate, as a boolean, whether an expression matches a pattern.",
				Homepage:    "",
				Repository:  "https://github.com/SimonSapin/rust-std-candidates",
				License:     "MIT",
				LicenseFile: "",
			},
		},
		OfficialSparse,
		"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08",
		[]string{},
		map[string][20]byte{
			"matches-0.1.8/Cargo.toml.orig":        {0x81, 0x8c, 0x35, 0xd1, 0xd7, 0x80, 0x08, 0xa9, 0xd8, 0xe2, 0xe7, 0xb3, 0x3b, 0xb3, 0x16, 0xee, 0xa0, 0x2d, 0x77, 0x11},
			"matches-0.1.8/Cargo.toml":             {0xae, 0x58, 0x0a, 0xdb, 0x71, 0xd8, 0xa0, 0x7f, 0xe5, 0x86, 0x5c, 0xd9, 0x95, 0x1b, 0xc6, 0x88, 0x6a, 0xb3, 0xe3, 0xa4},
			"matches-0.1.8/LICENSE":                {0x1b, 0x0e, 0x91, 0x3d, 0x41, 0xa6, 0x6c, 0x98, 0x83, 0x76, 0x89, 0x8a, 0xa9, 0x95, 0xd6, 0xc2, 0xf4, 0x5b, 0xb5, 0x0c},
			"matches-0.1.8/lib.rs":                 {0xc6, 0x32, 0x9e, 0xf2, 0x16, 0x2b, 0x8b, 0x59, 0xdd, 0x2b, 0xcd, 0xa7, 0x40, 0x21, 0x51, 0xc4, 0x7a, 0x7c, 0xf9, 0x9f},
			"matches-0.1.8/tests/macro_use_one.rs": {0xfa, 0xad, 0x09, 0x5b, 0x61, 0x82, 0xc1, 0x59, 0x29, 0x02, 0x0d, 0x79, 0x58, 0x16, 0x61, 0xf1, 0xa3, 0x31, 0xda, 0xa3},
		},
	)
	memchr := newPackage(
		t,
		"memchr",
		"2.3.3",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "Safe interface to memchr.",
				Homepage:    "https://github.com/BurntSushi/rust-memchr",
				Repository:  "https://github.com/BurntSushi/rust-memchr",
				License:     "Unlicense/MIT",
				LicenseFile: "",
			},
		},
		OfficialRegistry,
		"3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400",
		[]string{},
		map[string][20]byte{
			"memchr-2.3.3/.github/workflows/ci.yml": {0x98, 0x73, 0x72, 0xcc, 0x6a, 0x27, 0x66, 0x8c, 0x02, 0xb8, 0xe9, 0xa9, 0xfe, 0x68, 0xe7, 0x67, 0xcd, 0x4c, 0x65, 0x8c},
			"memchr-2.3.3/.gitignore":               {0x55, 0x6d, 0x32, 0xe5, 0xcb, 0x6d, 0xfb, 0xdb, 0xfc, 0x67, 0xe2, 0xdd, 0x06, 0xf9, 0x48, 0xb7, 0x6f, 0xe8, 0xb9, 0xd3},
			"memchr-2.3.3/.ignore":                  {0xe4, 0x83, 0x05, 0xd0, 0x30, 0xf8, 0xae, 0xbb, 0xe1, 0xa8, 0x9f, 0xcb, 0x84, 0xf4, 0xac, 0x19, 0xbb, 0x07, 0x39, 0x75},
			"memchr-2.3.3/COPYING":                  {0xdd, 0x44, 0x57, 0x10, 0xe6, 0xe4, 0xca, 0xcc, 0xc4, 0xf8, 0xa5, 0x87, 0xa1, 0x30, 0xea, 0xee, 0xbe, 0x83, 0xf6, 0xf6},
			"memchr-2.3.3/Cargo.toml.orig":          {0xfe, 0x07, 0x39, 0xea, 0xcb, 0x95, 0x77, 0xf2, 0x2f, 0xa4, 0xcd, 0x9c, 0x35, 0x09, 0x6c, 0x2a, 0xc1, 0x1e, 0xad, 0x76},
			"memchr-2.3.3/Cargo.toml":               {0x39, 0x5d, 0x46, 0xc2, 0x21, 0x6b, 0xc3, 0xa5, 0x09, 0x2b, 0x37, 0xc3, 0xdc, 0x75, 0x16, 0x56, 0x64, 0x67, 0xdf, 0xd4},
			"memchr-2.3.3/LICENSE-MIT":              {0x4c, 0x89, 0x90, 0xad, 0xd9, 0x18, 0x0f, 0xc5, 0x9e, 0xfa, 0x5b, 0x0d, 0x8f, 0xaf, 0x64, 0x3c, 0x97, 0x09, 0x50, 0x1e},
			"memchr-2.3.3/README.md":                {0x80, 0x2d, 0x3b, 0xfe, 0xa6, 0xff, 0x17, 0xd5, 0xf0, 0x82, 0xec, 0xce, 0xb5, 0x11, 0x91, 0x30, 0x21, 0x39, 0x06, 0x99},
			"memchr-2.3.3/UNLICENSE":                {0xff, 0x00, 0x7c, 0xe1, 0x1f, 0x3f, 0xf7, 0x96, 0x4f, 0x1a, 0x5b, 0x04, 0x20, 0x2c, 0x4e, 0x95, 0xb5, 0xc8, 0x2c, 0x85},
			"memchr-2.3.3/build.rs":                 {0x59, 0xfc, 0xa6, 0x95, 0x12, 0x75, 0xd4, 0xfe, 0xba, 0x14, 0xc0, 0x71, 0x09, 0xc4, 0xbb, 0x35, 0x1d, 0xa1, 0x87, 0xd5},
			"memchr-2.3.3/rustfmt.toml":             {0x55, 0x8a, 0x7c, 0x72, 0xe4, 0x15, 0x54, 0x4f, 0x0b, 0x87, 0x90, 0xcd, 0x8c, 0x75, 0x26, 0x90, 0xd0, 0xbc, 0x05, 0xc6},
			"memchr-2.3.3/src/c.rs":                 {0xc7, 0x50, 0x95, 0x49, 0x3e, 0x42, 0xaf, 0xfe, 0x48, 0xa2, 0x3e, 0x7d, 0xe9, 0xc7, 0x7c, 0x95, 0xec, 0x13, 0x9c, 0x7c},
			"memchr-2.3.3/src/fallback.rs":          {0x7f, 0x13, 0xc3, 0x50, 0x2f, 0x30, 0x06, 0x46, 0xa2, 0x4e, 0x58, 0x17, 0x2d, 0x99, 0xd7, 0x80, 0x33, 0xe3, 0x39, 0xb2},
			"memchr-2.3.3/src/iter.rs":              {0xb0, 0x1c, 0xc8, 0x99, 0x87, 0xd9, 0xc2, 0xf6, 0x1b, 0xaa, 0x97, 0xf7, 0x46, 0x5c, 0xa2, 0xb8, 0x1c, 0xe8, 0x0b, 0x52},
			"memchr-2.3.3/src/lib.rs":               {0x35, 0xfa, 0xc0, 0xbe, 0xa5, 0x20, 0xbf, 0xeb, 0x99, 0x19, 0x7c, 0xfd, 0x97, 0x05, 0x6b, 0xed, 0x99, 0x58, 0x2c, 0xe2},
			"memchr-2.3.3/src/naive.rs":             {0xfc, 0xb7, 0x09, 0x37, 0x5b, 0xf7, 0xa2, 0x0d, 0xdd, 0x97, 0x38, 0x89, 0x82, 0x05, 0x0d, 0x5d, 0x5d, 0xa5, 0xf1, 0x5f},
			"memchr-2.3.3/src/tests/iter.rs":        {0xda, 0xaf, 0x6a, 0x0b, 0x80, 0x05, 0x63, 0xde, 0xb4, 0x52, 0x27, 0xb2, 0xe7, 0xfb, 0x6f, 0xda, 0xe4, 0x64, 0xae, 0x84},
			"memchr-2.3.3/src/tests/memchr.rs":      {0x37, 0xf4, 0x4d, 0xc2, 0x9c, 0x8e, 0xfb, 0x1d, 0x19, 0xee, 0xa6, 0xf2, 0x92, 0x4a, 0x19, 0xba, 0x86, 0xc1, 0x4b, 0x3b},
			"memchr-2.3.3/src/tests/miri.rs":        {0xc6, 0x56, 0x9d, 0x55, 0xc1, 0x82, 0x55, 0xa5, 0x2f, 0x5a, 0x75, 0x25, 0x6f, 0x95, 0x16, 0x71, 0x01, 0xd9, 0xdb, 0xeb},
			"memchr-2.3.3/src/tests/mod.rs":         {0xcd, 0xd9, 0xc0, 0x08, 0x5c, 0xec, 0xcf, 0x76, 0x09, 0x0b, 0xc3, 0x27, 0x84, 0x0e, 0x6a, 0x93, 0x15, 0x49, 0x9a, 0xcc},
			"memchr-2.3.3/src/x86/avx.rs":           {0x4b, 0xc5, 0x6e, 0xd4, 0xfa, 0xa1, 0xb0, 0x26, 0xb3, 0x99, 0xc1, 0x69, 0x79, 0x0a, 0x67, 0x8b, 0x6a, 0xf6, 0xa9, 0x41},
			"memchr-2.3.3/src/x86/mod.rs":           {0xbe, 0x86, 0x44, 0xc7, 0xba, 0xd1, 0x42, 0x7b, 0x23, 0x43, 0x6e, 0x6d, 0x59, 0x92, 0xc1, 0x6e, 0x51, 0x29, 0xc2, 0x16},
			"memchr-2.3.3/src/x86/sse2.rs":          {0xd2, 0xb6, 0x40, 0xc7, 0x7a, 0x02, 0x23, 0x81, 0x2f, 0xa6, 0xa6, 0xf5, 0x50, 0xe6, 0x1f, 0xf4, 0x26, 0x93, 0x20, 0xf0},
			"memchr-2.3.3/src/x86/sse42.rs":         {0xf0, 0x53, 0x48, 0x24, 0x27, 0x71, 0x29, 0x18, 0xed, 0xf5, 0x0a, 0xea, 0x0c, 0xb7, 0xe2, 0xfb, 0x95, 0xa2, 0xcc, 0xc1},
			"memchr-2.3.3/.cargo_vcs_info.json":     {0xb1, 0xec, 0xb8, 0x75, 0x1a, 0x0d, 0x53, 0xcc, 0xcb, 0x6b, 0xe6, 0x06, 0xed, 0xe1, 0x75, 0x73, 0x6d, 0x51, 0xda, 0x04},
		},
	)
	natord := newPackage(
		t,
		"natord",
		"1.0.9",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "Natural ordering for Rust",
				Homepage:    "https://github.com/lifthrasiir/rust-natord",
				Repository:  "https://github.com/lifthrasiir/rust-natord",
				License:     "MIT",
				LicenseFile: "",
			},
		},
		OfficialSparse,
		"308d96db8debc727c3fd9744aac51751243420e46edf401010908da7f8d5e57c",
		[]string{},
		map[string][20]byte{
			"natord-1.0.9/.gitignore":  {0x32, 0x54, 0xb5, 0xd5, 0x53, 0x81, 0x66, 0xf1, 0xfd, 0x5a, 0x0b, 0xb4, 0x1f, 0x7f, 0x3d, 0x3b, 0xbd, 0x45, 0x5c, 0x56},
			"natord-1.0.9/.travis.yml": {0x4e, 0xad, 0xee, 0x39, 0x32, 0x4e, 0x1c, 0xc0, 0xe1, 0x56, 0xd4, 0xc1, 0x63, 0x2f, 0xc4, 0x17, 0xf9, 0xed, 0x8a, 0x7e},
			"natord-1.0.9/Cargo.toml":  {0xbf, 0xfd, 0xbe, 0x1b, 0x6b, 0x25, 0x76, 0xae, 0x1b, 0x17, 0xd4, 0x69, 0x35, 0x45, 0xaa, 0x01, 0x45, 0xb4, 0x35, 0xbe},
			"natord-1.0.9/lib.rs":      {0x83, 0x32, 0x02, 0x72, 0xb3, 0xd9, 0x22, 0xf5, 0xbe, 0xd4, 0x08, 0xd0, 0x4f, 0xb1, 0x89, 0x54, 0xc3, 0x49, 0x58, 0xb0},
			"natord-1.0.9/LICENSE.txt": {0xbf, 0x18, 0xc5, 0xcc, 0x6c, 0x1d, 0xb9, 0x3e, 0xb4, 0xe2, 0xe9, 0x5b, 0x11, 0x35, 0x2e, 0x46, 0x60, 0x40, 0x8f, 0xec},
			"natord-1.0.9/README.md":   {0xc2, 0x95, 0x88, 0x54, 0xfd, 0xc1, 0x03, 0x29, 0xe4, 0x09, 0x90, 0x62, 0x92, 0x50, 0x6d, 0x6e, 0x24, 0xdd, 0x78, 0xb5},
		},
	)
	nom := newPackage(
		t,
		"nom",
		"4.2.3",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "A byte-oriented, zero-copy, parser combinators library",
				Homepage:    "",
				Repository:  "https://github.com/Geal/nom",
				License:     "MIT",
				LicenseFile: "",
			},
		},
		OfficialRegistry,
		"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6",
		[]string{
			"memchr",
			"version_check",
		},
		map[string][20]byte{
			"nom-4.2.3/CHANGELOG.md":                 {0x48, 0xba, 0x21, 0x32, 0x6a, 0x9a, 0x3b, 0xdf, 0x15, 0x04, 0xa6, 0x42, 0xa4, 0x2c, 0xf7, 0xf8, 0x4a, 0x00, 0x76, 0xe8},
			"nom-4.2.3/Cargo.toml.orig":              {0xc1, 0xd3, 0x74, 0x94, 0x1f, 0xf2, 0x33, 0x92, 0xf4, 0x09, 0xb9, 0x33, 0xc7, 0x99, 0xe8, 0x49, 0xbd, 0x94, 0x8b, 0x0e},
			"nom-4.2.3/Cargo.toml":                   {0xe0, 0x41, 0xd8, 0xad, 0x32, 0xb7, 0x19, 0xe9, 0xab, 0x49, 0xc3, 0xf7, 0xf1, 0x87, 0xd2, 0x90, 0x2e, 0xa4, 0x91, 0xf9},
			"nom-4.2.3/LICENSE":                      {0xe7, 0xb3, 0x26, 0x57, 0xd4, 0x60, 0x8c, 0xb4, 0xa5, 0x7a, 0xfa, 0x79, 0x08, 0x01, 0xec, 0xb9, 0xc2, 0xa0, 0x37, 0xf5},
			"nom-4.2.3/build.rs":                     {0xc5, 0x9d, 0x60, 0xb5, 0x50, 0x9a, 0x47, 0x0f, 0xf9, 0x44, 0x5c, 0x43, 0xee, 0x41, 0x4a, 0x02, 0x97, 0x24, 0x50, 0x4e},
			"nom-4.2.3/src/bits.rs":                  {0x41, 0x9b, 0xf0, 0xa2, 0x57, 0x19, 0x92, 0x04, 0xfb, 0xf7, 0xe9, 0x8c, 0xa2, 0x90, 0x4e, 0xaf, 0xd9, 0x9f, 0x22, 0x64},
			"nom-4.2.3/src/branch.rs":                {0x38, 0x8f, 0x6a, 0xe6, 0xce, 0x5d, 0x44, 0x1d, 0xbe, 0x36, 0x0b, 0xcc, 0x1b, 0xe4, 0x93, 0x31, 0x53, 0x86, 0xe7, 0x3a},
			"nom-4.2.3/src/bytes.rs":                 {0x48, 0x3c, 0xae, 0x38, 0xa9, 0xeb, 0x91, 0x29, 0xe6, 0xa7, 0x95, 0x8f, 0x1c, 0xa4, 0x0b, 0xe9, 0xd9, 0xbb, 0x25, 0x71},
			"nom-4.2.3/src/character.rs":             {0xa7, 0xec, 0x8c, 0xc1, 0x04, 0x25, 0x01, 0xdc, 0xed, 0x6c, 0x35, 0xf4, 0x36, 0x34, 0x2e, 0x86, 0x5a, 0xac, 0x97, 0xbe},
			"nom-4.2.3/src/internal.rs":              {0x2f, 0xfa, 0xf1, 0x9d, 0xf1, 0x6c, 0x69, 0x1d, 0xa9, 0xd2, 0x50, 0x84, 0x0d, 0x9f, 0xbd, 0xf5, 0x6e, 0x24, 0x03, 0xbb},
			"nom-4.2.3/src/lib.rs":                   {0x39, 0xe4, 0xe9, 0x67, 0xce, 0x4a, 0x55, 0x9f, 0xb0, 0x8b, 0x3b, 0xb0, 0xd7, 0xb3, 0x8f, 0x8c, 0x94, 0x29, 0xfe, 0x82},
			"nom-4.2.3/src/macros.rs":                {0x39, 0xa2, 0x44, 0x61, 0xed, 0xd8, 0xad, 0xc7, 0x4a, 0x28, 0xc3, 0x6d, 0x14, 0x69, 0x9b, 0x07, 0x28, 0xe9, 0x0f, 0x9d},
			"nom-4.2.3/src/methods.rs":               {0x3b, 0x93, 0x4d, 0x58, 0x8e, 0xe1, 0x49, 0x65, 0xb1, 0x9d, 0x83, 0x1e, 0xfc, 0x7f, 0x0b, 0x63, 0xcf, 0x78, 0xe0, 0xa9},
			"nom-4.2.3/src/multi.rs":                 {0x09, 0x8b, 0xa3, 0xb2, 0xfa, 0xcc, 0xdf, 0x34, 0x85, 0x49, 0x1d, 0x88, 0xe5, 0x21, 0xa3, 0xc9, 0xf5, 0x66, 0x7d, 0xdc},
			"nom-4.2.3/src/nom.rs":                   {0xc7, 0x44, 0x54, 0x75, 0x2b, 0x17, 0xc2, 0xa7, 0xfa, 0x8a, 0xbe, 0x39, 0x80, 0x93, 0x61, 0x7f, 0x81, 0x41, 0xf6, 0xf7},
			"nom-4.2.3/src/regexp.rs":                {0x28, 0x75, 0x00, 0x9c, 0xe9, 0xd7, 0xdf, 0x67, 0x87, 0xd7, 0x94, 0xa4, 0xa8, 0x07, 0xa6, 0x77, 0xa5, 0xf1, 0xe6, 0x00},
			"nom-4.2.3/src/sequence.rs":              {0x1a, 0x49, 0x6d, 0xbd, 0x10, 0x94, 0xe9, 0x3f, 0x14, 0x09, 0xba, 0xd3, 0x0b, 0x31, 0x86, 0x7a, 0x56, 0x6d, 0xe0, 0x89},
			"nom-4.2.3/src/simple_errors.rs":         {0x58, 0x5b, 0xa0, 0xd7, 0x74, 0xa4, 0xd6, 0xc4, 0x82, 0x29, 0xf6, 0x1e, 0x05, 0x13, 0x68, 0x33, 0x3b, 0xa1, 0x6b, 0xf9},
			"nom-4.2.3/src/str.rs":                   {0x2e, 0x73, 0x03, 0xa4, 0x2f, 0x0f, 0x31, 0x64, 0x7c, 0x68, 0xc9, 0xb4, 0x5c, 0x85, 0xe8, 0x15, 0xc7, 0xc9, 0xd2, 0xf4},
			"nom-4.2.3/src/traits.rs":                {0x74, 0xca, 0x43, 0xbd, 0x49, 0xa2, 0xb8, 0x17, 0x99, 0xdf, 0xef, 0x4b, 0x8f, 0xbe, 0xcf, 0xd1, 0xf7, 0x78, 0x84, 0xe9},
			"nom-4.2.3/src/types.rs":                 {0x30, 0x32, 0xdb, 0xa2, 0x6c, 0xdd, 0xcd, 0x70, 0x18, 0xc0, 0xe4, 0x82, 0x95, 0xe3, 0x0a, 0xe4, 0x03, 0x90, 0x2d, 0x7e},
			"nom-4.2.3/src/util.rs":                  {0xfc, 0x1a, 0x7d, 0xc1, 0x25, 0x0b, 0x69, 0x2c, 0x5f, 0x84, 0x9f, 0x2b, 0xfb, 0x6b, 0x84, 0x24, 0x1e, 0xff, 0x9d, 0x0a},
			"nom-4.2.3/src/verbose_errors.rs":        {0x4d, 0x5e, 0xe9, 0x06, 0xc5, 0x2b, 0x72, 0x08, 0x0d, 0x8a, 0x6e, 0xee, 0x5a, 0x92, 0x27, 0xab, 0x4e, 0x76, 0x50, 0x6b},
			"nom-4.2.3/src/whitespace.rs":            {0x2d, 0x5c, 0xb6, 0x2b, 0xf4, 0xc5, 0xe7, 0x10, 0x7d, 0x12, 0x2f, 0x12, 0x06, 0x03, 0xcc, 0x6c, 0x38, 0xc7, 0x47, 0xbe},
			"nom-4.2.3/tests/arithmetic.rs":          {0xa8, 0x5e, 0xf1, 0x4d, 0xf0, 0xe3, 0x7e, 0x94, 0x55, 0xb2, 0x54, 0x3e, 0xd0, 0xd4, 0x3c, 0x5f, 0x7a, 0x60, 0x0a, 0x7d},
			"nom-4.2.3/tests/arithmetic_ast.rs":      {0x1b, 0x75, 0x23, 0x96, 0xf0, 0x83, 0xd8, 0xea, 0x50, 0x0a, 0x04, 0xea, 0x0c, 0xe7, 0x99, 0xb7, 0x8f, 0xf4, 0x20, 0x98},
			"nom-4.2.3/tests/blockbuf-arithmetic.rs": {0x8b, 0x41, 0xaf, 0xbc, 0xc7, 0x79, 0xce, 0x04, 0x10, 0xa1, 0x29, 0x5b, 0x98, 0x7b, 0x43, 0x40, 0xd3, 0x07, 0x98, 0xb9},
			"nom-4.2.3/tests/complete_arithmetic.rs": {0xbe, 0x31, 0x00, 0x87, 0x88, 0xba, 0x4b, 0xa2, 0xf9, 0x01, 0xec, 0xbf, 0x53, 0x37, 0xe5, 0x5f, 0x6c, 0x20, 0x82, 0x8e},
			"nom-4.2.3/tests/complete_float.rs":      {0xc1, 0xe4, 0xb1, 0x0c, 0x80, 0xc2, 0x61, 0x84, 0x2e, 0x80, 0x85, 0x17, 0xd8, 0x5f, 0x98, 0xbf, 0xf6, 0xca, 0x00, 0x6a},
			"nom-4.2.3/tests/css.rs":                 {0xa6, 0xbf, 0x48, 0x3a, 0xe3, 0x64, 0xc9, 0x82, 0x04, 0x28, 0xc1, 0xb8, 0x30, 0xe2, 0x8c, 0x0e, 0x4e, 0xed, 0xde, 0xc3},
			"nom-4.2.3/tests/custom_errors.rs":       {0x41, 0xd9, 0x4a, 0x40, 0x8d, 0xfb, 0x23, 0xee, 0xd0, 0x14, 0x2d, 0x7b, 0x9c, 0x98, 0x2a, 0x4f, 0xdf, 0xbd, 0x29, 0x3a},
			"nom-4.2.3/tests/float.rs":               {0xcb, 0xe1, 0x9c, 0x77, 0xcd, 0x0b, 0x14, 0x91, 0x98, 0xd6, 0x10, 0xcb, 0xdb, 0x82, 0x5a, 0x06, 0xd2, 0x7c, 0x1e, 0xa4},
			"nom-4.2.3/tests/inference.rs":           {0xce, 0xe9, 0x4e, 0x42, 0x24, 0xa7, 0x2c, 0xee, 0xd0, 0xc2, 0x15, 0x49, 0xed, 0x2e, 0xf1, 0x34, 0x16, 0x57, 0xfc, 0x32},
			"nom-4.2.3/tests/ini.rs":                 {0x6c, 0x51, 0xaf, 0x96, 0x42, 0x60, 0x32, 0xb9, 0xf4, 0x42, 0xca, 0xea, 0xb5, 0x42, 0xb9, 0x00, 0xb1, 0x12, 0x87, 0x19},
			"nom-4.2.3/tests/ini_str.rs":             {0xaa, 0x97, 0x1f, 0x48, 0xe7, 0x8b, 0x79, 0x76, 0x6d, 0xeb, 0xa7, 0x21, 0x7d, 0xfc, 0xa7, 0x8a, 0x9b, 0x96, 0x08, 0x55},
			"nom-4.2.3/tests/issues.rs":              {0x5f, 0x61, 0xb6, 0x90, 0x52, 0xfa, 0xd5, 0xb4, 0x13, 0xd9, 0xe5, 0x88, 0xff, 0xec, 0xab, 0x80, 0x04, 0x84, 0x97, 0x88},
			"nom-4.2.3/tests/json.rs":                {0xb4, 0x5c, 0x8b, 0x0d, 0xb1, 0x54, 0x18, 0x03, 0x50, 0xc3, 0x4c, 0x2d, 0x20, 0x86, 0xfa, 0x35, 0x5b, 0x1b, 0x45, 0xe5},
			"nom-4.2.3/tests/mp4.rs":                 {0x72, 0x88, 0x43, 0x38, 0x29, 0xb9, 0xb3, 0xf3, 0x05, 0x76, 0x1b, 0x24, 0x0c, 0x8c, 0x9b, 0x60, 0x52, 0x9f, 0x66, 0xa1},
			"nom-4.2.3/tests/multiline.rs":           {0x27, 0x0c, 0x16, 0xeb, 0xaf, 0x0c, 0x38, 0x39, 0xe9, 0xeb, 0xe6, 0x6c, 0xca, 0x28, 0x80, 0x3f, 0xe6, 0x4b, 0xbc, 0x05},
			"nom-4.2.3/tests/named_args.rs":          {0xf6, 0x7e, 0xf9, 0x9a, 0x7d, 0xf4, 0x47, 0x05, 0xee, 0xcf, 0x64, 0xde, 0x45, 0xf2, 0x00, 0xc2, 0x96, 0xec, 0x46, 0x48},
			"nom-4.2.3/tests/overflow.rs":            {0x1a, 0xd7, 0xe1, 0xbd, 0xc3, 0xb0, 0x70, 0xbd, 0x33, 0x66, 0x80, 0xf3, 0x92, 0x94, 0xf7, 0x40, 0x0b, 0xf5, 0x0d, 0x61},
			"nom-4.2.3/tests/reborrow_fold.rs":       {0x4b, 0xa8, 0x9f, 0x2b, 0x42, 0xdc, 0xf8, 0x03, 0xa2, 0x68, 0x7b, 0x37, 0x0c, 0x83, 0x5e, 0x21, 0x34, 0xf1, 0x1a, 0xf1},
			"nom-4.2.3/tests/test1.rs":               {0xf7, 0xc2, 0x23, 0x20, 0x85, 0x09, 0x24, 0x2a, 0x9b, 0x66, 0xd9, 0xfb, 0xfa, 0xcc, 0xc5, 0x09, 0xd2, 0xa1, 0x4b, 0xef},
			"nom-4.2.3/.cargo_vcs_info.json":         {0x93, 0xed, 0xe0, 0xfa, 0xfa, 0x3c, 0xcc, 0xa2, 0x17, 0x78, 0x71, 0x67, 0xb2, 0xa7, 0xa9, 0xc2, 0x2c, 0xdf, 0x0b, 0x88},
		},
	)
	//goland:noinspection GoSnakeCaseUsage
	unicode_bidi := newPackage(
		t,
		"unicode-bidi",
		"0.3.4",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "Implementation of the Unicode Bidirectional Algorithm",
				Homepage:    "",
				Repository:  "https://github.com/servo/unicode-bidi",
				License:     "MIT / Apache-2.0",
				LicenseFile: "",
			},
		},
		OfficialSparse,
		"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5",
		[]string{
			"matches",
		},
		map[string][20]byte{
			"unicode-bidi-0.3.4/.appveyor.yml":           {0xe6, 0xa4, 0xb7, 0x1b, 0x2e, 0x46, 0x1d, 0x29, 0x89, 0x1f, 0x69, 0x38, 0x15, 0xfb, 0x8d, 0x94, 0x6a, 0x46, 0x8d, 0xd5},
			"unicode-bidi-0.3.4/.gitignore":              {0x49, 0xb1, 0x3a, 0x4a, 0xa5, 0x53, 0x69, 0x41, 0x85, 0xbb, 0x35, 0xd9, 0xba, 0x50, 0x8e, 0x55, 0x54, 0x5c, 0xcb, 0x5c},
			"unicode-bidi-0.3.4/.rustfmt.toml":           {0x76, 0xa8, 0x1d, 0x84, 0xfe, 0x87, 0x0a, 0xde, 0x0d, 0x22, 0xf3, 0xe9, 0x52, 0xa6, 0x1d, 0x0d, 0x75, 0xeb, 0x5a, 0x87},
			"unicode-bidi-0.3.4/.travis.yml":             {0xe4, 0xac, 0xfe, 0xc5, 0xe6, 0xf3, 0xaf, 0xef, 0x42, 0xe8, 0x46, 0x1a, 0x15, 0xa0, 0x23, 0x48, 0xab, 0xd5, 0xd7, 0x41},
			"unicode-bidi-0.3.4/AUTHORS":                 {0x05, 0xbb, 0x8f, 0x0c, 0x2d, 0x2c, 0x48, 0x0a, 0xb3, 0x71, 0xdf, 0xbc, 0x7d, 0x58, 0xcc, 0x44, 0xb9, 0x18, 0x44, 0x03},
			"unicode-bidi-0.3.4/COPYRIGHT":               {0x87, 0x1b, 0x99, 0x12, 0xab, 0x96, 0xcf, 0x7d, 0x79, 0xcb, 0x8a, 0xe8, 0x3c, 0xa0, 0xb0, 0x8c, 0xd5, 0xd0, 0xcb, 0xfd},
			"unicode-bidi-0.3.4/Cargo.toml.orig":         {0x51, 0xdc, 0xde, 0xea, 0xa5, 0xe9, 0x6a, 0x9b, 0x02, 0x47, 0x1b, 0x6b, 0xa8, 0xa1, 0xfd, 0xd0, 0x8e, 0xc6, 0xaa, 0x03},
			"unicode-bidi-0.3.4/Cargo.toml":              {0xf6, 0xb0, 0xf6, 0x3b, 0xf8, 0x0d, 0x80, 0xeb, 0x4d, 0x5d, 0xf4, 0x4f, 0x3c, 0x6d, 0x77, 0x94, 0x7a, 0x93, 0x0a, 0xcb},
			"unicode-bidi-0.3.4/LICENSE-APACHE":          {0x57, 0x98, 0x83, 0x2c, 0x31, 0x66, 0x3c, 0xed, 0xc1, 0x61, 0x8d, 0x18, 0x54, 0x4d, 0x44, 0x5d, 0xa0, 0x29, 0x52, 0x29},
			"unicode-bidi-0.3.4/LICENSE-MIT":             {0x60, 0xc3, 0x52, 0x20, 0x81, 0xbf, 0x15, 0xd7, 0xac, 0x1d, 0x4c, 0x5a, 0x63, 0xde, 0x42, 0x5e, 0xf2, 0x53, 0xe8, 0x7a},
			"unicode-bidi-0.3.4/README.md":               {0x78, 0xd6, 0xf2, 0x56, 0x91, 0xfa, 0x62, 0x3f, 0x95, 0x0e, 0xfd, 0xf9, 0xd2, 0xa9, 0xaa, 0xe1, 0x29, 0xe3, 0x0e, 0x2d},
			"unicode-bidi-0.3.4/src/char_data/mod.rs":    {0x7a, 0x08, 0xa4, 0x61, 0x93, 0xd7, 0x1d, 0xf1, 0x5d, 0xa9, 0xd9, 0x00, 0xc3, 0x39, 0xa4, 0xdb, 0xce, 0x0a, 0x5f, 0x45},
			"unicode-bidi-0.3.4/src/char_data/tables.rs": {0xe4, 0x95, 0xd7, 0x99, 0x81, 0x92, 0x9f, 0x5b, 0xb2, 0xf0, 0x45, 0x7d, 0x45, 0x2d, 0xe8, 0xa4, 0xb5, 0x2f, 0x66, 0x66},
			"unicode-bidi-0.3.4/src/deprecated.rs":       {0x43, 0xac, 0x50, 0x28, 0xa8, 0xf1, 0xd5, 0xdd, 0xba, 0x76, 0x82, 0x21, 0x47, 0xfb, 0x36, 0x3e, 0xf0, 0x22, 0x26, 0x01},
			"unicode-bidi-0.3.4/src/explicit.rs":         {0xee, 0xd6, 0xc9, 0x86, 0x59, 0x90, 0xa3, 0x34, 0x98, 0x33, 0x9e, 0x5f, 0x0f, 0xe9, 0xba, 0x63, 0x35, 0x2d, 0x08, 0xf1},
			"unicode-bidi-0.3.4/src/format_chars.rs":     {0x46, 0x8f, 0x7b, 0x50, 0xf5, 0xa2, 0x90, 0xb6, 0xbd, 0xbb, 0x07, 0x07, 0x38, 0x1d, 0xfb, 0x5a, 0x61, 0xe9, 0x00, 0x12},
			"unicode-bidi-0.3.4/src/implicit.rs":         {0x1a, 0x47, 0x01, 0x2f, 0x5d, 0xa7, 0x12, 0xa4, 0xf8, 0xd0, 0x41, 0x8a, 0x54, 0xb9, 0x3a, 0xc5, 0xe0, 0x11, 0xce, 0xce},
			"unicode-bidi-0.3.4/src/level.rs":            {0xc9, 0xfa, 0xbd, 0x87, 0xfb, 0x70, 0x6e, 0x9e, 0xa6, 0xaa, 0x9b, 0xbf, 0xcf, 0xf0, 0x0c, 0xad, 0x11, 0xef, 0xae, 0x07},
			"unicode-bidi-0.3.4/src/lib.rs":              {0x7e, 0xa0, 0xfb, 0x0b, 0x66, 0x11, 0x5b, 0x1e, 0xc7, 0x66, 0xa9, 0xad, 0x90, 0xb9, 0x37, 0x49, 0x6e, 0x66, 0x10, 0xae},
			"unicode-bidi-0.3.4/src/prepare.rs":          {0x50, 0x30, 0xd5, 0xcb, 0xb3, 0x28, 0xb1, 0xf0, 0x4b, 0x79, 0x87, 0x9e, 0xe8, 0xa4, 0x55, 0x60, 0x9b, 0x79, 0xf2, 0x09},
		},
	)
	//goland:noinspection GoSnakeCaseUsage
	version_check := newPackage(
		t,
		"version_check",
		"0.1.5",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "Tiny crate to check the version of the installed/running rustc.",
				Homepage:    "",
				Repository:  "https://github.com/SergioBenitez/version_check",
				License:     "MIT/Apache-2.0",
				LicenseFile: "",
			},
		},
		OfficialRegistry,
		"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd",
		[]string{},
		map[string][20]byte{
			"version_check-0.1.5/.gitignore":           {0x32, 0x54, 0xb5, 0xd5, 0x53, 0x81, 0x66, 0xf1, 0xfd, 0x5a, 0x0b, 0xb4, 0x1f, 0x7f, 0x3d, 0x3b, 0xbd, 0x45, 0x5c, 0x56},
			"version_check-0.1.5/Cargo.toml.orig":      {0xfc, 0xdc, 0x04, 0x76, 0x76, 0xe0, 0x85, 0x74, 0x85, 0xf2, 0x83, 0x4e, 0xed, 0xa2, 0x7d, 0x97, 0x10, 0x9e, 0x24, 0x38},
			"version_check-0.1.5/Cargo.toml":           {0x00, 0xd6, 0xf8, 0x2c, 0xe9, 0x31, 0xab, 0x8d, 0xe0, 0x90, 0xf7, 0x99, 0xbe, 0x41, 0xaf, 0xa1, 0x20, 0xf2, 0x3d, 0xa7},
			"version_check-0.1.5/LICENSE-APACHE":       {0x57, 0x98, 0x83, 0x2c, 0x31, 0x66, 0x3c, 0xed, 0xc1, 0x61, 0x8d, 0x18, 0x54, 0x4d, 0x44, 0x5d, 0xa0, 0x29, 0x52, 0x29},
			"version_check-0.1.5/LICENSE-MIT":          {0xcf, 0xcb, 0x55, 0x2e, 0xf0, 0xaf, 0xbe, 0x7c, 0xcb, 0x41, 0x28, 0x89, 0x1c, 0x0d, 0xe0, 0x06, 0x85, 0x98, 0x8a, 0x4b},
			"version_check-0.1.5/README.md":            {0xa8, 0x8c, 0x57, 0x6b, 0x3d, 0xc0, 0x5d, 0x78, 0x01, 0x22, 0x17, 0xf3, 0x4a, 0x10, 0xfd, 0x9a, 0xe5, 0xa5, 0x14, 0xda},
			"version_check-0.1.5/src/lib.rs":           {0x0b, 0x69, 0xc0, 0xdb, 0xa2, 0x82, 0x4a, 0x1b, 0xfd, 0x0b, 0x3f, 0x3d, 0xa7, 0x1c, 0x21, 0xec, 0x2e, 0x27, 0x95, 0xfa},
			"version_check-0.1.5/.cargo_vcs_info.json": {0xc2, 0xcb, 0xaa, 0x20, 0x21, 0x2e, 0x0f, 0x8e, 0xb1, 0xe2, 0xd1, 0x87, 0x5b, 0xe2, 0xa1, 0x7d, 0x5a, 0xb2, 0x23, 0xc2},
		},
	)
	//goland:noinspection GoSnakeCaseUsage
	accesskit_winit := newPackage(
		t,
		"accesskit_winit",
		"0.16.1",
		locations,
		rust.CargoToml{
			Package: rust.TomlPackage{
				Description: "AccessKit UI accessibility infrastructure: winit adapter",
				Homepage:    "",
				Repository:  "https://github.com/AccessKit/accesskit",
				License:     "Apache-2.0",
				LicenseFile: "",
			},
		},
		OfficialSparse,
		"5284218aca17d9e150164428a0ebc7b955f70e3a9a78b4c20894513aabf98a67",
		[]string{}, // see comment at the head of the function
		map[string][20]byte{
			"accesskit_winit-0.16.1/.cargo_vcs_info.json":         {0x41, 0x67, 0x0c, 0xdd, 0x89, 0x86, 0x8c, 0xae, 0xaf, 0x12, 0xac, 0x15, 0x1b, 0xa7, 0x26, 0x12, 0x1a, 0x7f, 0x2f, 0xcb},
			"accesskit_winit-0.16.1/CHANGELOG.md":                 {0x73, 0x6e, 0x12, 0xda, 0x4b, 0xf0, 0x6f, 0x14, 0x2c, 0x78, 0x15, 0x34, 0x9f, 0xe4, 0xd9, 0xfc, 0x8d, 0x8a, 0x4e, 0x49},
			"accesskit_winit-0.16.1/Cargo.lock":                   {0x8c, 0x0f, 0xf3, 0x0a, 0x7c, 0x7d, 0x82, 0x4d, 0x6b, 0x4f, 0xf7, 0x2c, 0xbf, 0xcc, 0x47, 0xae, 0xb5, 0xde, 0x42, 0xba},
			"accesskit_winit-0.16.1/Cargo.toml":                   {0xf6, 0xee, 0x42, 0x0b, 0x53, 0x3c, 0x6a, 0x8b, 0x36, 0x82, 0xd1, 0xaf, 0xe1, 0x38, 0xe5, 0x23, 0xc4, 0xcf, 0xb8, 0x22},
			"accesskit_winit-0.16.1/Cargo.toml.orig":              {0x28, 0x43, 0x01, 0xa6, 0x50, 0x7e, 0x77, 0x01, 0xba, 0xd8, 0xc7, 0xb1, 0x60, 0x69, 0x06, 0xac, 0xe5, 0x47, 0x86, 0x00},
			"accesskit_winit-0.16.1/README.md":                    {0x19, 0xf7, 0x31, 0xae, 0x27, 0x7a, 0xad, 0x4a, 0x74, 0x0b, 0x23, 0xe0, 0x03, 0x54, 0xcb, 0x53, 0xdd, 0xb5, 0x08, 0x64},
			"accesskit_winit-0.16.1/examples/simple.rs":           {0x7c, 0xd8, 0x64, 0xd6, 0x18, 0x3b, 0x46, 0xb0, 0xe2, 0x13, 0x78, 0xaa, 0xae, 0x2e, 0xcb, 0x0a, 0xbc, 0x8a, 0xcd, 0xd3},
			"accesskit_winit-0.16.1/src/lib.rs":                   {0x7d, 0x1e, 0x3b, 0xc6, 0xd8, 0x08, 0x0e, 0x8f, 0x34, 0x8d, 0x46, 0x90, 0xbd, 0xf6, 0xdc, 0x5d, 0x44, 0xb3, 0xc8, 0x15},
			"accesskit_winit-0.16.1/src/platform_impl/macos.rs":   {0xb9, 0xcb, 0xa6, 0x9f, 0xa2, 0x90, 0x2d, 0x2f, 0x6c, 0xc9, 0xb2, 0x31, 0x91, 0x69, 0xfa, 0x5c, 0xf3, 0x97, 0x5f, 0x05},
			"accesskit_winit-0.16.1/src/platform_impl/mod.rs":     {0x7a, 0xac, 0xdc, 0xea, 0xfb, 0xe2, 0xc1, 0xbb, 0x92, 0x0d, 0x6c, 0x84, 0xa6, 0x85, 0xa3, 0x54, 0xba, 0xcf, 0xd8, 0x3d},
			"accesskit_winit-0.16.1/src/platform_impl/null.rs":    {0xec, 0xd4, 0x20, 0x9a, 0x6a, 0x40, 0x80, 0xa3, 0xc0, 0x2b, 0xfd, 0x01, 0xc8, 0x0f, 0x32, 0xa1, 0xc0, 0x25, 0x1c, 0x66},
			"accesskit_winit-0.16.1/src/platform_impl/unix.rs":    {0x70, 0x10, 0xe6, 0xaa, 0xd7, 0xfb, 0x9c, 0xbd, 0xc9, 0x6b, 0xf3, 0x84, 0x62, 0x18, 0x16, 0xc0, 0x12, 0x72, 0x76, 0xf8},
			"accesskit_winit-0.16.1/src/platform_impl/windows.rs": {0x6d, 0x80, 0x68, 0x7a, 0x1b, 0x62, 0x76, 0x79, 0x30, 0xef, 0xb8, 0xdf, 0xfb, 0x4f, 0xa9, 0x64, 0x52, 0xa7, 0x79, 0x16},
		},
	)
	expectedPkgs := []pkg.Package{
		ansi_term.Package,
		matches.Package,
		memchr.Package,
		natord.Package,
		nom.Package,
		unicode_bidi.Package,
		version_check.Package,
		accesskit_winit.Package,
	}
	for _, p := range expectedPkgs {
		p.SetID()
	}

	var expectedRelationships = []artifact.Relationship{
		{
			From: matches.Package,
			To:   unicode_bidi.Package,
			Type: artifact.DependencyOfRelationship,
		},
		{
			From: memchr.Package,
			To:   nom.Package,
			Type: artifact.DependencyOfRelationship,
		},
		{
			From: version_check.Package,
			To:   nom.Package,
			Type: artifact.DependencyOfRelationship,
		},
	}
	for _, p := range []packageInfo{ansi_term, matches,
		memchr,
		natord,
		nom,
		unicode_bidi,
		version_check,
		accesskit_winit,
	} {
		for k, v := range p.RustMeta.SourceGeneratedDepInfo.PathSha1Hashes {
			expectedRelationships = append(expectedRelationships, artifact.Relationship{
				From: p.Package,
				To:   file.NewCoordinates(k, p.RustMeta.SourceGeneratedDepInfo.DownloadLink),
				Type: artifact.ContainsRelationship,
				Data: file.Digest{
					Algorithm: "sha1",
					Value:     strings.ToLower(hex.EncodeToString(v[:])),
				},
			})
		}
	}

	pkgtest.TestFileParser(t, fixture, newCargoModCataloger(rust.DefaultCatalogerConfig()).parseCargoLock, expectedPkgs, expectedRelationships)
	//pkgtest.NewCatalogTester().WithCompareOptions(cm).FromFile(t, fixture).Expects(expectedPkgs, expectedRelationships).TestParser(t, parseCargoLock)

}
